---
##########################################################################################
- name: Login to OpenShift
  register: oc_login
  shell: "$(which oc) login -u {{ OC_USERNAME }} -p {{ OC_PASSSWORD }} -n {{ NAMESPACE }} {{ OC_HOST }}"  
##########################################################################################    
- name: Delete all resources
  shell: |
    kc get all -nenea-defense-ausf | grep deployment|awk '{print "kubectl delete "$1" -n{{ NAMESPACE }}"}'|sh
    kc get all -nenea-defense-ausf | grep statefulset|awk '{print "kubectl delete "$1" -n{{ NAMESPACE }}"}'|sh    
- name: Find tar files
  find:
    paths: /root/{{ cnfDirectory }}/images/
    file_type: file
    patterns: "*.tar"
  register: files_matched
- name: Loop through the tar files and load them
  shell: |
    imageName=$(podman load -i {{ item.path }} | awk '{print $3}'|awk -F, '{print $1}'|awk -F/ '{print $2}')
    podman tag $imageName {{ REGISTRY }}/$imageName
    podman push {{ REGISTRY }}/$imageName
    echo $imageName
  loop: "{{ files_matched.files }}"
  register: loadingImages
- name: Check the image names
  debug:
    var: loadingImages.results.0.stdout
- name: Check the image names
  debug:
    var: loadingImages.results.1.stdout
##########################################################################################
- name: Replace License in configuration.yaml
  ansible.builtin.replace:
    path: "/root/{{ cnfDirectory }}/configuration.yaml"
    regexp: 'License:.*'
    replace: 'License: {{ LICENSE }}'
  when: LICENSE is defined   
  
- name: Replace Node Image in configuration.yaml
  ansible.builtin.replace:
    path: "/root/{{ cnfDirectory }}/configuration.yaml"
    regexp: 'NodeImage:.*'
    replace: 'NodeImage: {{ REGISTRY }}/{{ loadingImages.results.1.stdout }}'
- name: Replace DB Image in configuration.yaml
  ansible.builtin.replace:
    path: "/root/{{ cnfDirectory }}/configuration.yaml"
    regexp: 'DBImage:.*'
    replace: 'DBImage: {{ REGISTRY }}/{{ loadingImages.results.0.stdout }}'
##########################################################################################
- name: Execute generate.bash
  register: generate_bash  
  shell: "/root/{{ cnfDirectory }}/generate.bash -y"
##########################################################################################    
#- name: Set privileged mode for pods
#  register: give_privileged  
#  shell: |
#    sed -i -e 's/privileged\s*:\s*false/privileged : true/g' ../deployment/*
#- name: Change deployment PRODUCT
#  register: set_PRODUCT  
#  shell: |
#    sed -i -e 's/PRODUCT\s*:\s*{{ PRODUCT }}/PRODUCT : {{ PRODUCT }}/g' ../deployment/* 
##########################################################################################
- name: Change NAMESPACE
  shell: 'sed -i "s/namespace.*/namespace: {{ NAMESPACE }}/g" /root/{{ cnfDirectory }}/deployment/*'
- name: Deploy 
  register: deployment  
  shell: |
    "oc apply -f /root/{{ cnfDirectory }}/namespace/"    
    "oc apply -f /root/{{ cnfDirectory }}/deployment/"    
##########################################################################################    
- name: Wait untill all pods are "Running"
  register: check_running_status
  until: check_running_status.stdout == "0"
  retries: 100
  delay: 60
  changed_when: False
  shell: "oc get pods -o wide -n {{ NAMESPACE }} | grep -e \"{{ PRODUCT }}\\|a-db\" | awk {'print $3'} | grep -v 'Running' | wc -l"
- name: Wait until all pods are Ready
  register: check_ready_status
  until: check_ready_status.stdout == "0"
  retries: 100
  delay: 60
  changed_when: False
  shell: "oc get pods -o wide -n {{ NAMESPACE }} | grep -e \"{{ PRODUCT }}\\|a-db\" | awk {'print $2'} | grep -v '1/1' | wc -l"
- name: Pause for 2 minutes to just in case new pods appear
  pause:
    minutes: 2
  
- name: Wait again until all pods are Ready
  register: check_ready_status2
  until: check_ready_status2.stdout == "0"
  retries: 100
  delay: 60
  changed_when: False
  shell: "oc get pods -o wide -n {{ NAMESPACE }} | grep -e \"{{ PRODUCT }}\\|a-db\" | awk {'print $2'} | grep -v '1/1' | wc -l"
  
- name: Wait for DEPLOYMENT STATUS DONE on oam-0
  register: check_deployment_done
  until: check_deployment_done.stdout == "1"
  retries: 100
  delay: 60
  changed_when: False
  shell: "oc exec -it -n {{ NAMESPACE }} {{ PRODUCT }}-oam-0 -- tail -n 10 /opt/netzwert/log/platform_run_{{ PRODUCT }}-oam-0.log | grep 'DEPLOYMENT STATUS: Done.' | wc -l"    
##########################################################################################    
- name: Update the configuration for AUSF
  when: PRODUCT == "aaa"
  shell: |
    ausfIp=$(oc get svc -nenea-ausf | grep fe-ausf | awk '{print $3}')
    cd /root/{{ cnfDirectory }}/blueprint/config
    rm -rf *
    /bin/cp -f ../template/* .
    sed -i "s/###AUSF_IP_ADDRESS/$ausfIp/g" NRFClient_NRFClientProfileConfig_AusfNRFClientProfileConfig_Telenor
    sed -i "s/###NRF_SERVER_NAME/{{ NRFSERVER }}/g" NRFClient_Servers_NRFClientServers_Telenor
- name: Update the configuration for UDM
  when: PRODUCT == "udm"
  shell: |
    cd /root/{{ cnfDirectory }}/blueprint/config
    rm -rf *
    /bin/cp -f ../template/NRFClient_NRFClientProfileConfig_UdmNRFClientProfileConfig_Telenor .
    feIp=$(oc get svc -nenea-udm | grep fe-ueau | awk '{print $3}')
    sed -i "s/###UEAU/$feIp/g" NRFClient_NRFClientProfileConfig_UdmNRFClientProfileConfig_Telenor
    feIp=$(oc get svc -nenea-udm | grep fe-subs | awk '{print $3}')
    sed -i "s/###SDM/$feIp/g" NRFClient_NRFClientProfileConfig_UdmNRFClientProfileConfig_Telenor
    feIp=$(oc get svc -nenea-udm | grep fe-ueco | awk '{print $3}')
    sed -i "s/###UECM/$feIp/g" NRFClient_NRFClientProfileConfig_UdmNRFClientProfileConfig_Telenor
    feIp=$(oc get svc -nenea-udm | grep fe-mt | awk '{print $3}')
    sed -i "s/###MT/$feIp/g" NRFClient_NRFClientProfileConfig_UdmNRFClientProfileConfig_Telenor
    feIp=$(oc get svc -nenea-udm | grep fe-param | awk '{print $3}')
    sed -i "s/###PP/$feIp/g" NRFClient_NRFClientProfileConfig_UdmNRFClientProfileConfig_Telenor
    feIp=$(oc get svc -nenea-udm | grep fe-notif | awk '{print $3}')
    sed -i "s/###Notif/$feIp/g" NRFClient_NRFClientProfileConfig_UdmNRFClientProfileConfig_Telenor
    feIp=$(oc get svc -nenea-udm | grep fe-event | awk '{print $3}')
    sed -i "s/###EE/$feIp/g" NRFClient_NRFClientProfileConfig_UdmNRFClientProfileConfig_Telenor
    sed -i "s/###NRF_SERVER_NAME/{{ NRFSERVER }}/g" NRFClient_Servers_NRFClientServers_Telenor
- name: Reload the blueprint configuration
  shell: |
    cd /root/{{ cnfDirectory }}/blueprint/config
    zip blueprint.zip *
    oc cp /root/{{ cnfDirectory }}/blueprint/config/blueprint.zip {{ NAMESPACE }}/{{ PRODUCT }}-oam-0:blueprint.zip
    oc exec -it -n{{ NAMESPACE }} {{ PRODUCT }}-oam-0 -- /usr/local/netzwert/AAA/bin/loadSystemState -fn blueprint.zip
    oc exec -it -n{{ NAMESPACE }} {{ PRODUCT }}-oam-0 -- /usr/local/netzwert/bin/do-cmd 'aaa stop' +all -p
    rm -f *.zip